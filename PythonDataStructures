Chapter 7 Files
--------------------------------------------------------
#Write a program that prompts for a file name, then opens that file and reads through the file, and print the 
# contents of the file in upper case. Use the file words.txt to produce the output below.
#You can download the sample data at http://www.py4e.com/code3/words.txt
# Use words.txt as the file name
fname = input("Enter File Name:")
fh = open(fname)
for read in fh:
    read= read.upper().rstrip()
    print(read)
 ------------------------------------------------------------------------------
Chapter 8 Lists
------------------------------------------------------------------------------
 #Open the file romeo.txt and read it line by line. For each line, split the line into a list of words 
 # using the split() method. The program should build a list of words. For each word on each line check to see 
 # if the word is already in the list and if not append it to the list. When the program completes, sort and print 
 #the resulting words in alphabetical order. You can download the sample data at http://www.py4e.com/code3/romeo.txt
 
fname  = input("Enter File Name:")
fh = open(fname)
lst  = list()
for line in fh:
    line = line.rstrip()
    line  = line.split()
    for word in line:
        if word in lst:
            continue
        else:
            lst.append(word)
lst.sort()
print(lst)
-------------------------------------------------------------------------------
Chapter 9 Dictionary
-------------------------------------------------------------------------------
#Chapter 9
#Write a program to read through the mbox-short.txt and figure out who has sent the greatest number of mail messages. 
# The program looks for 'From ' lines and takes the second word of those lines as the person who sent the mail. 
# The program creates a Python dictionary that maps the sender's mail address to a count of the number of times they 
# appear in the file. After the dictionary is produced, the program reads through the dictionary using a maximum loop 
# to find the most prolific committer.

fname = input("Enter File Name:")
handle  = open(fname)
lst = list()
for line in handle:
    line = line.strip()
    if line.startswith("From:"):
        words = line.split()
        email = words[1]
        lst.append(email)

count= dict()   # Making A dictionary
for  email in lst:
    count[email] = count.get(email,0)+1

bigcount = 0
email_adress= 0 
for key,value in count.items(): #items produces key and value both as output
    if bigcount is None or value > bigcount: #it means that if value of a email is bigger than previous one than replace
        bigcount = value
        email_address = key

print(email_address, bigcount)
    #D:\University Work\Coursera\Python University of Michigan\Course 2\mbox-short.txt
--------------------------------------------------------------------------------------------------------------------------------------
Chapter 10 Tuples
---------------------------------------------------------------------------------------------------------------------------------
#Chapter 10 Tuples
#Write a program to read through the mbox-short.txt and figure out the distribution by hour of the day for each of the
# messages. You can pull the hour out from the 'From ' line by finding the time and then splitting the string a second 
# time using a colon. From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
#Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.
name = input("Enter file:")
if len(name) < 1 : name = "mbox-short.txt"
handle = open(name)
d=dict()
for line in handle:
    if not line.startswith("From "): 
        continue
    else:    
        line=line.split()
        line=line[5]
        line=line[0:2]
        d[line]=d.get(line,0)+1

lst=list()        
for value,count in d.items():
    lst.append((value,count))

lst.sort()
for value,count in lst:
    print (value,count)

   
   
